<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>704.二分查找</title>
    <url>/2021/03/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<img src="/2021/03/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png" class title="二分查找">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">if</span> nums[left] == target:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(logn)$，$n$是数组长度。</p>
<p>空间复杂度：$O(1)$。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>1.两数之和</title>
    <url>/2021/03/20/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<img src="/2021/03/20/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.png" class title="两数之和">
<p><strong>方法一：暴力枚举</strong></p>
<p>双循环，首先i指向数组中第一个数，然后下个循环中依次寻找i之后的数，若$nums[i]+num[j]=target$输出$i$和$j$。循环结束则输出空表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; list[int]:</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(N^2)$，其中$N$是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p>
<p>空间复杂度：$O(1)$。</p>
<p><strong>方法二：哈希表</strong></p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">hashtable = dict()</span><br><span class="line">for <span class="built_in">index</span>, num <span class="keyword">in</span> enumerate(nums): //返回数组元素的下标<span class="built_in">index</span>和元素num</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">target</span> - num <span class="keyword">in</span> hashtable:</span><br><span class="line">        <span class="keyword">return</span> [hashtable[<span class="keyword">target</span> - num], <span class="built_in">index</span>]</span><br><span class="line">    hashtable[nums[<span class="built_in">index</span>]] = <span class="built_in">index</span></span><br><span class="line"><span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(N)$，其中$N$是数组中的元素数量。对于每一个元素$x$，我们可以$O(1)$地寻找$target - x$。</p>
<p>空间复杂度：$O(N)$，其中$N$是数组中的元素数量。主要为哈希表的开销。</p>
<img src="/2021/03/20/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/%E6%96%B9%E6%B3%95%E4%BA%8C%E5%93%88%E5%B8%8C%E8%A1%A8.png" class title="方法二哈希表">
<p><strong>$dict$称做字典(dictionary)</strong></p>
<p>常见形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">单层: <span class="built_in">dict</span> = &#123;<span class="string">&#x27;apple&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;egg&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">嵌套: <span class="built_in">dict</span> = &#123;<span class="string">&#x27;schools&#x27;</span>:&#123;<span class="string">&#x27;class&#x27;</span>:<span class="number">10</span>, <span class="string">&#x27;student&#x27;</span>:<span class="number">200</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>常见用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">长度: <span class="built_in">len</span>(<span class="built_in">dict</span>)</span><br><span class="line">新建/修改键值: <span class="built_in">dict</span>[<span class="string">&quot;apple&quot;</span>] = <span class="number">4</span></span><br><span class="line">删除: <span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&quot;egg&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>构造方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;Dict = &#123;&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt;Dict = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="literal">None</span>,<span class="string">&#x27;b&#x27;</span>:<span class="literal">None</span>&#125;</span><br><span class="line">&gt;&gt;&gt;Dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>],[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>]))</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;Dict = <span class="built_in">dict</span>(a=<span class="string">&quot;1&quot;</span>,b=<span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>操作方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Dict = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">Dict.has_key(key)  判断一个字典是否有某个key</span><br><span class="line">&gt;&gt;&gt;Dict.has_key(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.has_key(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Dict.keys()  获得一个字典所有的key，存入一个<span class="built_in">list</span>中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.keys()</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">Dict.values() 获得一个字典所有的value，存入一个<span class="built_in">list</span>中</span><br><span class="line">&gt;&gt;&gt;Dict.keys()</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">Dict.copy()  将一个Dict拷贝给另一个Dict，而不是传索引</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict_1 = Dict.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict_1[<span class="string">&#x27;a&#x27;</span>] = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict_1,Dict</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line">如果是Dict_1 = Dict 那么任意<span class="built_in">dict</span>改变之后，另外一个也会改变，=号赋值是引用传递</span><br><span class="line"></span><br><span class="line">Dict.get(key, default) 获得指定key的值，如果没有值，返回default值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.get(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.get(<span class="string">&#x27;e&#x27;</span>,<span class="number">100</span>)</span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br><span class="line">Dict.update(Dict_1) 遍历Dict_1来更新Dict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict_1 = Dict.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict_1[<span class="string">&quot;e&quot;</span>] = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict_1[<span class="string">&quot;a&quot;</span>] = -<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict,Dict_1</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:-<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;e&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.update(Dict_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:-<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;e&#x27;</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">Dict.pop(key)  取出一个key，并从<span class="built_in">dict</span>中移除他</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.pop(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">Dict.clear()  清空字典</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.clear()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Dict.items()  把<span class="built_in">dict</span>变为可遍历的元组数组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dict.items()</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>26.删除有序数组中的重复项</title>
    <url>/2021/03/22/%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<img src="/2021/03/22/%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.png" class title="删除数组中的重复项">
<p>方法一：</p>
<p><strong>双指针</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt; <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != nums[i]:</span><br><span class="line">                <span class="keyword">if</span> (j - i) &gt; <span class="number">1</span>: //优化nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]时的情况</span><br><span class="line">                    nums[i + <span class="number">1</span>] = nums[j]</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析：</strong></p>
<p>时间复杂度：$O(n)。$</p>
<p>空间复杂度：$O(1)。$</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>34.在排序数组中查找元素的第一个和最后一个位置</title>
    <url>/2021/03/29/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<img src="/2021/03/29/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/%E9%A2%98%E7%9B%AE.png" class title="题目">
<p><strong>二分法</strong></p>
<p>定义两个函数分别查询元素的开始位置和结束位置，排除元素不在的区域逐渐缩小，注意点是查找结束位置时需要向上取整。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        a = self.left_func(nums, target)</span><br><span class="line">        <span class="keyword">if</span> a == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> [a, self.right_func(nums, target)]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_func</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == target:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nums[left] == target:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_func</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right + <span class="number">1</span>) // <span class="number">2</span>  //这里是为了让例[<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span>]不陷入循环从而向上取整</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] == target:</span><br><span class="line">                left = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(log\ n)$。</p>
<p>空间复杂度：$O(1)$。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>对似然性的理解</title>
    <url>/2021/03/17/%E5%AF%B9%E4%BC%BC%E7%84%B6%E6%80%A7%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>似然性与概率</strong></p>
<p>例子：机器学习中已知随机变量D表示数据，随机变量$\theta$表示模型参数。</p>
<p>先验概率$P(\theta)$：已知模型参数$\theta$，也称统计概率。</p>
<p>似然函数$P(D|\theta)$：已知在模型参数$\theta$的条件下，数据为D的概率。</p>
<p>后验概率$P(\theta|D)$：已知数据结果为D，求导致该结果的参数$\theta$，也称条件概率。</p>
<p>贝叶斯公式：即三者关系</p>
<script type="math/tex; mode=display">
P\left( \theta \mid D \right) =\frac{P\left( \theta \right) \cdot P\left( D\mid \theta \right)}{P\left( D \right)}</script><p>预测时，计算数据对后验概率分布的期望值</p>
<script type="math/tex; mode=display">
P\left( x \mid D \right) =\int{P\left( x \mid \theta ,D \right) P\left( \theta \mid D \right) d\theta}</script><p><strong>极大似然估计与贝叶斯（极大后验）估计</strong></p>
<p>极大似然估计（ML）：估计模型的参数，目的是找出一组参数$\theta$，使得模型产生出观测数据D的概率最大。</p>
<script type="math/tex; mode=display">
\hat{\theta}=arg\max_{\theta} P(D|\theta)</script><p>贝叶斯估计：</p>
<script type="math/tex; mode=display">
\hat{P}\left( \theta \mid D \right) =\frac{P\left( \theta \right) \cdot P\left( D\mid \theta \right)}{P\left( D \right)}</script><p>实际应用中可以把两者联系起来，假设先验分布式均匀分布，取后验概率最大，就能从贝叶斯估计中得到极大似然估计。</p>
<hr>
]]></content>
      <categories>
        <category>统计学习方法</category>
      </categories>
      <tags>
        <tag>第一章 统计学习及监督学习概率</tag>
      </tags>
  </entry>
  <entry>
    <title>852.山脉数组的峰顶索引</title>
    <url>/2021/03/27/%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<img src="/2021/03/27/%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95/%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95.png" class title="山脉数组的峰顶索引">
<p><strong>二分法</strong></p>
<p>找到arr[mid] &lt; arr[mid + 1]即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span>(<span class="params">self, arr: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> arr[mid] &gt; arr[mid + <span class="number">1</span>]:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(log\ n)$，$n$是数组的长度。</p>
<p>空间复杂度：$O(1)$。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>35.搜素插入位置</title>
    <url>/2021/03/24/%E6%90%9C%E7%B4%A0%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<img src="/2021/03/24/%E6%90%9C%E7%B4%A0%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/%E6%90%9C%E7%B4%A0%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.png" class title="搜素插入位置">
<p><strong>方法一</strong></p>
<p>暴力解法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">if</span> target &gt; nums[n - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> target &lt;= nums[i]:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<p>二分法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(nums)</span><br><span class="line"> <span class="keyword">if</span> target &gt; nums[n - <span class="number">1</span>]:</span><br><span class="line">     <span class="keyword">return</span> n</span><br><span class="line"> left = <span class="number">0</span></span><br><span class="line"> right = n - <span class="number">1</span></span><br><span class="line"> <span class="keyword">while</span> left &lt; right:</span><br><span class="line">     mid = (left + right) // <span class="number">2</span></span><br><span class="line">     <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">         left = mid + <span class="number">1</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         right = mid</span><br><span class="line"> <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(logn)$，其中n为数组的长度。二分查找所需的时间复杂度为$O(logn)$。</p>
<p>空间复杂度：$O(1)$，我们只需要常数空间存放若干变量。</p>
<p>二分法总结：</p>
<p><a href="https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/">https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/</a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>33.搜索旋转排序数组</title>
    <url>/2021/03/31/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<img src="/2021/03/31/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/%E6%90%9C%E7%B4%A0%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.png" class title="搜素旋转排序数组">
<p>二分法，旋转后局部有序</p>
<img src="/2021/03/31/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/%E9%A2%98%E8%A7%A3.png" class title="题解">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> nums[<span class="number">0</span>] &gt; nums[mid]:</span><br><span class="line">                <span class="keyword">if</span>  nums[mid] &lt; target &lt;= nums[n - <span class="number">1</span>]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># nums[0] &lt;= nums[mid]</span></span><br><span class="line">                <span class="keyword">if</span> nums[<span class="number">0</span>] &lt;= target &lt; nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[left] == target:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>空间复杂度：$O(log\ n)$。</p>
<p>时间复杂度：$O(1)$。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>27.移除元素</title>
    <url>/2021/03/23/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<img src="/2021/03/23/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.png" class title="移除元素">
<p><strong>方法一</strong></p>
<p>双指针，同时从数组头部出发，一快一慢，指针$j$指向数字不等于val时，$i,j$同时前进指向下一个数字，若该数字等于val时,指针$i$不动，指针$j$前进，然后判断$j$所指数字是否等于val，若不等于val，则替换$i$所指位置数字，若等于则$j$继续前进，直到$j$指向数组尾部。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(n)$。</p>
<p>空间复杂度：$O(1)。$</p>
<p><strong>方法二</strong></p>
<p>双指针，一头一尾向中间移动直到碰撞，$i$指向头部，$j$指向尾部，$i$不等于val时向前移动，若等于val则用$nums[j]$替换掉$nums(i)$,并且j—，相当于删掉该数字，重复直到$i=j$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
<p>时间复杂度：$O(n)。$</p>
<p>空间复杂度：$O(1)。$</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
</search>
